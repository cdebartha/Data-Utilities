	subroutine blkmvp_turb_sd(ien,xl1,dl1,dlo,ddl1_t,pl_t,
     &                       dl1_t,dlo_t,ynode,
!     $		             umag_trans,vort_trans,
!     &                      he_trans,dist_trans,inode_trans,
     $                       ntrans)
c**************************************************************************
c	BLOCK FOR 3D INCOMPRESSIBLE SEMI-DISCRETE FORMULATION
c       WITH SUPG AND PSPG STABILIZATIONS
c       TO COMPUTE RESIDUALS FOR MATRIX FREE GMRES TECHNIQUE. 
c	LOOPS HAVE BEEN UNROLLED TO ACHIEVE SPEED UP
c	WRITTEN BY SANJAY MITTAL; SEPTEMBER 05, 2004
c****************************************************************************
	implicit none
	include "global.h"
	include "turbpara.h"


C...EXTERNAL VARIABLES
	real*8  xl1(nsd,nnl),dl1(ndf,nnl),dlo(ndf,nnl) 
        real*8  dl1_t(ndf_t,nnl),dlo_t(ndf_t,nnl),ddl1_t(ndf_t,nnl)
	real*8  pl_t(ndf_t,nnl),ynode(nnl)
        integer ien(nen,nec)

!	integer  inode_trans(nnc),ntrans
!        real*8  umag_trans(nnl),vort_trans(nnl)
!        real*8  he_trans(nnl),dist_trans(nnl)
     
C...INTERNAL VARIABLES
	real*8 x1(3,nen),d1(4,nen),do(4,nen)
        real*8 d1_t(1,nen),do_t(1,nen),pt(1,nen),dd1_t(1,nen)
        real*8 dist_t(nen),vort_t(nen),he_t(nen),umag_t(nen),yt(nen)
        real*8 dist_trip,vort_trip,he_trip,umag_trip,distance



	real*8 vis,turb_vis,turb_kappa
	real*8 sh(0:3,nen),det
	real*8 uu0,uux,uuy,uuz
	real*8 vv0,vvx,vvy,vvz
	real*8 ww0,wwx,wwy,wwz
        real*8 unut0,unutx,unuty,unutz,unutt

	real*8 du0,dux,duy,duz,dut
	real*8 dv0,dvx,dvy,dvz,dvt
	real*8 dw0,dwx,dwy,dwz,dwt
        real*8 dnut0,dnutx,dnuty,dnutz,dnutt

	real*8 dp0,dpx,dpy,dpz
	real*8 sh0,shx,shy,shz,sht

	real*8 uu0_n,uux_n,uuy_n,uuz_n
	real*8 vv0_n,vvx_n,vvy_n,vvz_n
	real*8 ww0_n,wwx_n,wwy_n,wwz_n
        real*8 unut0_n,unutx_n,unuty_n,unutz_n
 

	real*8 du0_n,dux_n,duy_n,duz_n
	real*8 dv0_n,dvx_n,dvy_n,dvz_n
	real*8 dw0_n,dwx_n,dwy_n,dwz_n
        real*8 dnut0_n,dnutx_n,dnuty_n,dnutz_n
  

	real*8 uu0_np1,uux_np1,uuy_np1,uuz_np1
	real*8 vv0_np1,vvx_np1,vvy_np1,vvz_np1
	real*8 ww0_np1,wwx_np1,wwy_np1,wwz_np1
        real*8 unut0_np1,unutx_np1,unuty_np1,unutz_np1

	real*8 du0_np1,dux_np1,duy_np1,duz_np1
	real*8 dv0_np1,dvx_np1,dvy_np1,dvz_np1
	real*8 dw0_np1,dwx_np1,dwy_np1,dwz_np1
        real*8 dnut0_np1,dnutx_np1,dnuty_np1,dnutz_np1

	real*8 hk,dif
	real*8 umag, rek      ! element |u| and Re
	real*8 del1,  del2,tau_supg,umagn

	real*8 eff0, effd, effr, eff1
	real*8 effs, effc
	real*8 tmp,tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,tmp8
	real*8 temp1,temp2,temp3,temp4,temp5,temp6
	
	real*8 uga,ugu,ugv,ugw  ! u.grad[Na], u.grad[u]

	real*8 umag0,umagx,umagy,umagz
        real*8 grad_umag,grad_nut
        real*8 rx,ry,rz,sx,sy,sz
        real*8 he_min,he_max,he_rgn,he_ugn,he_rgnt
         real*8 dis1,dis2,dis3,dis4,dis5,dis6


C**************************************************************************
c......ARRAYS FOR SHAPE ROUTINES
	real*8   xr(nen,nen),cf(nen,nen)
	real*8   cf11,cf21,cf31,cf41,cf12,cf22,cf32,cf42
	real*8   cf13,cf23,cf33,cf43,cf14,cf24,cf34,cf44
	real*8   xr11,xr21,xr31,xr41,xr12,xr22,xr32,xr42
	real*8   xr13,xr23,xr33,xr43,xr14,xr24,xr34,xr44

	integer na,nb,ig,inl,jnl,knl,k,isd,jsd
	integer inode,ie,idf,i,j
C**************************************************************************
C....ADDITIONAL ARRAY FOR OPTIMIZATION
	real*8 u0,ux,uy,uz,ut
	real*8 v0,vx,vy,vz,vt
	real*8 w0,wx,wy,wz,wt
	real*8 p0,px,py,pz
	real*8 div0
	real*8 sxx,sxy,sxz,syy,syz,szz
C**************************************************************************
C.......TERMS FOR S-A MODEL

        real*8  gradnu_sq,tyz,txy,txz
        real*8  fr1,ft1,ft2,fac1,fac2,fv1,fv2,fw
        real*8  t1,g,gt,r 
        real*8  sgrad,sbar,dif_turb
        real*8  p_function,q_function,r_function
        real*8  tmpp,tmpq,tmpr,tmpd
        real*8  termp,termq,termb,terms,termsq
        real*8  termd1,termd2,termdif
        real*8  udif,ub,ugnu,unudif,ugnua,ugnutb

C***************************************************************************



C...CLEAR BUFFER ARRAY
	call fclear(pl_t,ndf_t*nnl)

	turb_kappa = 0.15
	dif = viscosity !1.0/reynolds




	do ie = 1,nec

C...CLEAR LOCAL ARRAYS
			do inl = 1,nen
				do idf = 1,ndf_t
					pt(idf,inl) = 0.0
				enddo
			enddo

C...LOCALIZE  ARRAYS
                	do inl = 1,nen 

				k = ien(inl,ie)
	

                        	do idf = 1,ndf
                                	d1(idf,inl)   = dl1(idf,k)
                                	do(idf,inl)   = dlo(idf,k)
                        	enddo

                        	do isd = 1,nsd
                                	x1(isd,inl)  = xl1(isd,k)
                        	enddo
c..........LOCALIZE EDDY VISCOSITY
				do idf = 1,ndf_t
					do_t(idf,inl) = dlo_t(idf,k)
					d1_t(idf,inl) = dl1_t(idf,k)
					dd1_t(idf,inl)= ddl1_t(idf,k)
					end do


C...........LOCALIZE DISTANCE FROM WALL
			yt(inl) = ynode(k)

C...........LOCALIZE TRANSITION TERMS 
!                        dist_t(inl)= dist_trans(k)
!                        vort_t(inl)= vort_trans(k)
!                          he_t(inl)= he_trans(k)
!                        umag_t(inl)= umag_trans(k)  

                enddo

		do ig=1,nquad3
				if(nen.eq.8) then
					include "sf3d8n.h"
				elseif(nen.eq.6)then
					include "sf3d6n.h"
				else
					include "sf3d4n.h"
				endif

c...VALUES OF U(N+ALPHA) AT QUAD POINTS

                        uu0_np1  = 0.0
                        vv0_np1  = 0.0
                        ww0_np1  = 0.0
                        uux_np1  = 0.0
                        vvx_np1  = 0.0
                        wwx_np1  = 0.0
                        uuy_np1  = 0.0
                        vvy_np1  = 0.0
                        wwy_np1  = 0.0
                        uuz_np1  = 0.0
                        vvz_np1  = 0.0
                        wwz_np1  = 0.0
                      
                        unut0_np1= 0.0
			unutx_np1= 0.0
			unuty_np1= 0.0
			unutz_np1= 0.0


                        uu0_n  = 0.0
                        vv0_n  = 0.0
                        ww0_n  = 0.0
                        uux_n  = 0.0
                        vvx_n  = 0.0
                        wwx_n  = 0.0
                        uuy_n  = 0.0
                        vvy_n  = 0.0
                        wwy_n  = 0.0
                        uuz_n  = 0.0
                        vvz_n  = 0.0
                        wwz_n  = 0.0

                        unut0_n= 0.0
			unutx_n= 0.0
			unuty_n= 0.0
			unutz_n= 0.0 

			du0_np1  = 0.0
			dv0_np1  = 0.0
			dw0_np1  = 0.0
			dux_np1  = 0.0
			dvx_np1  = 0.0
			dwx_np1  = 0.0
			duy_np1  = 0.0
			dvy_np1  = 0.0
			dwy_np1  = 0.0
			duz_np1  = 0.0
			dvz_np1  = 0.0
			dwz_np1  = 0.0
			
			dnut0_np1= 0.0
			dnutx_np1= 0.0
			dnuty_np1= 0.0
			dnutz_np1= 0.0
                      
                        


			dut      = 0.0
			dvt      = 0.0
			dwt      = 0.0
			dnutt    = 0.0


			distance  = 0.0
			umag_trip = 0.0
			  he_trip = 0.0
			vort_trip = 0.0
			dist_trip = 0.0

			do knl = 1,nen
				sh0 =  sh(0,knl)
				tmp1=dist_t(knl)
				tmp2=vort_t(knl)
				tmp3=umag_t(knl)
				tmp4=  he_t(knl)
				tmp5=  yt(knl)
				dist_trip= dist_trip+sh0*tmp1
				vort_trip= vort_trip+sh0*tmp2
				umag_trip= umag_trip+sh0*tmp3
				  he_trip=   he_trip+sh0*tmp4
				distance = distance +sh0*tmp5
			end do
		

				do inl=1,nen

					sh0 = sh(0,inl)
					shx = sh(1,inl)
					shy = sh(2,inl)
					shz = sh(3,inl)

					tmp1= d1(1,inl)
					tmp2= d1(2,inl)
					tmp3= d1(3,inl)
					tmp4= d1_t(1,inl)

                                        uu0_np1 = uu0_np1 + sh0*tmp1
                                        uux_np1 = uux_np1 + shx*tmp1
                                        uuy_np1 = uuy_np1 + shy*tmp1
                                        uuz_np1 = uuz_np1 + shz*tmp1

                                        vv0_np1 = vv0_np1 + sh0*tmp2
                                        vvx_np1 = vvx_np1 + shx*tmp2
                                        vvy_np1 = vvy_np1 + shy*tmp2
                                        vvz_np1 = vvz_np1 + shz*tmp2

                                        ww0_np1 = ww0_np1 + sh0*tmp3
                                        wwx_np1 = wwx_np1 + shx*tmp3
                                        wwy_np1 = wwy_np1 + shy*tmp3
                                        wwz_np1 = wwz_np1 + shz*tmp3

                                        unut0_np1=unut0_np1+ sh0*tmp4
					unutx_np1=unutx_np1+ shx*tmp4
					unuty_np1=unuty_np1+ shy*tmp4
					unutz_np1=unutz_np1+ shz*tmp4
  

					tmp1= do(1,inl)
					tmp2= do(2,inl)
					tmp3= do(3,inl)
					tmp4= do_t(1,inl)

                                        uu0_n = uu0_n + sh0*tmp1
                                        uux_n = uux_n + shx*tmp1
                                        uuy_n = uuy_n + shy*tmp1
                                        uuz_n = uuz_n + shz*tmp1

                                        vv0_n = vv0_n + sh0*tmp2
                                        vvx_n = vvx_n + shx*tmp2
                                        vvy_n = vvy_n + shy*tmp2
                                        vvz_n = vvz_n + shz*tmp2

                                        ww0_n = ww0_n + sh0*tmp3
                                        wwx_n = wwx_n + shx*tmp3
                                        wwy_n = wwy_n + shy*tmp3
                                        wwz_n = wwz_n + shz*tmp3

					unut0_n=unut0_n+ sh0*tmp4
					unutx_n=unutx_n+ shx*tmp4
					unuty_n=unuty_n+ shy*tmp4
					unutz_n=unutz_n+ shz*tmp4



					tmp1= dd1_t(1,inl)

					dnut0_np1=dnut0_np1+ sh0*tmp1
					dnutx_np1=dnutx_np1+ shx*tmp1
					dnuty_np1=dnuty_np1+ shy*tmp1
					dnutz_np1=dnutz_np1+ shz*tmp1
				

				enddo



                                dnut0 = dnut0_np1* alpha 
                                dnutx = dnutx_np1* alpha 
                                dnuty = dnuty_np1* alpha 
                                dnutz = dnutz_np1* alpha  

                                uu0 = uu0_np1 * alpha   + uu0_n * oma
                                uux = uux_np1 * alpha   + uux_n * oma
                                uuy = uuy_np1 * alpha   + uuy_n * oma
                                uuz = uuz_np1 * alpha   + uuz_n * oma





                                vv0 = vv0_np1 * alpha   + vv0_n * oma
                                vvx = vvx_np1 * alpha   + vvx_n * oma
                                vvy = vvy_np1 * alpha   + vvy_n * oma
                                vvz = vvz_np1 * alpha   + vvz_n * oma

                                ww0 = ww0_np1 * alpha   + ww0_n * oma
                                wwx = wwx_np1 * alpha   + wwx_n * oma
                                wwy = wwy_np1 * alpha   + wwy_n * oma
                                wwz = wwz_np1 * alpha   + wwz_n * oma

                                unut0 = unut0_np1* alpha +unut0_n *oma
                                unutx = unutx_np1* alpha +unutx_n *oma
                                unuty = unuty_np1* alpha +unuty_n *oma
                                unutz = unutz_np1* alpha +unutz_n *oma   






                                if (.not. steady) then
                                   dnutt = dnut0_np1/dt
                                endif

				div0 = dux_np1 + dvy_np1 + dwz_np1

				tmp1 = uu0
				tmp2 = vv0
				tmp3 = ww0
			umag=sqrt(tmp1*tmp1+tmp2*tmp2+tmp3*tmp3)

				tmp4= uu0_n
	                        tmp5=vv0_n
        	                tmp6=ww0_n
                	umagn= sqrt(tmp4*tmp4+tmp5*tmp5+tmp6*tmp6)


				
				tmp4 = unutx
                                tmp5 = unuty
                                tmp6 = unutz
                            gradnu_sq= tmp4*tmp4+tmp5*tmp5+tmp6*tmp6


	   temp1=sqrt(d1(1,1)*d1(1,1)+d1(2,1)*d1(2,1)+d1(3,1)*d1(3,1))
         temp2=sqrt(d1(1,2)*d1(1,2)+d1(2,2)*d1(2,2)+d1(3,2)*d1(3,2))
         temp3=sqrt(d1(1,3)*d1(1,3)+d1(2,3)*d1(2,3)+d1(3,3)*d1(3,3))
         temp4=sqrt(d1(1,4)*d1(1,4)+d1(2,4)*d1(2,4)+d1(3,4)*d1(3,4))
	 temp5=sqrt(d1(1,5)*d1(1,5)+d1(2,5)*d1(2,5)+d1(3,5)*d1(3,5))
         temp6=sqrt(d1(1,6)*d1(1,6)+d1(2,6)*d1(2,6)+d1(3,6)*d1(3,6))
                                                                                             
                                                                                             
                                                                                             
        umag0=sh(0,1)*temp1+sh(0,2)*temp2+sh(0,3)*temp3+sh(0,4)*temp4
     &                                   +sh(0,5)*temp5+sh(0,6)*temp6
        umagx=sh(1,1)*temp1+sh(1,2)*temp2+sh(1,3)*temp3+sh(1,4)*temp4
     &                                   +sh(1,5)*temp5+sh(1,6)*temp6
        umagy=sh(2,1)*temp1+sh(2,2)*temp2+sh(2,3)*temp3+sh(2,4)*temp4
     &                                   +sh(2,5)*temp5+sh(2,6)*temp6
        umagz=sh(3,1)*temp1+sh(3,2)*temp2+sh(3,3)*temp3+sh(3,4)*temp4
     &                                   +sh(3,5)*temp5+sh(3,6)*temp6  

	grad_umag=dsqrt(umagx*umagx + umagy*umagy + umagz*umagz)
                                                                                             
       grad_nut=dsqrt(unutx_n*unutx_n+unuty_n*unuty_n+unutz_n*unutz_n)

	 temp1=x1(1,1)-x1(1,2)
        temp2=x1(2,1)-x1(2,2)
        temp3=x1(3,1)-x1(3,2)
        dis1 = sqrt(temp1*temp1+temp2*temp2+temp3*temp3)
        temp1=x1(1,1)-x1(1,3)
        temp2=x1(2,1)-x1(2,3)
        temp3=x1(3,1)-x1(3,3)
        dis2 = sqrt(temp1*temp1+temp2*temp2+temp3*temp3)
        temp1=x1(1,2)-x1(1,3)
        temp2=x1(2,2)-x1(2,3)
        temp3=x1(3,2)-x1(3,3)
        dis3 = sqrt(temp1*temp1+temp2*temp2+temp3*temp3)

        he_max=0.2*max(dis1,dis2,dis3)
	                                                                                    
	                                                                                    






C...ELEMENT  LENGTH

		 he_min=he(ie)

	if (grad_umag .gt. 1.0e-9) then
             rx = umagx/grad_umag
             ry = umagy/grad_umag
             rz = umagz/grad_umag
                                                                                             
             he_rgn = dabs(rx*sh(1,1)+ry*sh(2,1)+rz*sh(3,1))
     &              + dabs(rx*sh(1,2)+ry*sh(2,2)+rz*sh(3,2))
     &              + dabs(rx*sh(1,3)+ry*sh(2,3)+rz*sh(3,3))
     &              + dabs(rx*sh(1,4)+ry*sh(2,4)+rz*sh(3,4))
     &              + dabs(rx*sh(1,5)+ry*sh(2,5)+rz*sh(3,5))
     &              + dabs(rx*sh(1,6)+ry*sh(2,6)+rz*sh(3,6))
                                                                                             
                                                                                             
             he_rgn = 2.0/he_rgn
                                                                                             
            else
             he_rgn = he_min
        end if


	if (umag .gt. 1.0d-6) then
            sx=uu0_n/umag
            sy=vv0_n/umag
            sz=ww0_n/umag
                                                                                             
            he_ugn = dabs(sx*sh(1,1)+sy*sh(2,1)+sz*sh(3,1))
     &             + dabs(sx*sh(1,2)+sy*sh(2,2)+sz*sh(3,2))
     &             + dabs(sx*sh(1,3)+sy*sh(2,3)+sz*sh(3,3))
     &             + dabs(sx*sh(1,4)+sy*sh(2,4)+sz*sh(3,4))
     &              + dabs(sx*sh(1,5)+sy*sh(2,5)+sz*sh(3,5))
     &              + dabs(sx*sh(1,6)+sy*sh(2,6)+sz*sh(3,6))
                                                                                             
                                                                                             
            he_ugn = 2.0/he_ugn
            else
            he_ugn = he_min
            end if
	 if (grad_nut .gt. 1.0e-9) then
            rx = unutx_n/grad_nut
            ry = unuty_n/grad_nut
            rz = unutz_n/grad_nut
                                                                                             
            he_rgnt= dabs(rx*sh(1,1)+ry*sh(2,1)+rz*sh(3,1))
     &             + dabs(rx*sh(1,2)+ry*sh(2,2)+rz*sh(3,2))
     &             + dabs(rx*sh(1,3)+ry*sh(2,3)+rz*sh(3,3))
     &             + dabs(rx*sh(1,4)+ry*sh(2,4)+rz*sh(3,4))
     &              + dabs(rx*sh(1,5)+ry*sh(2,5)+rz*sh(3,5))
     &              + dabs(rx*sh(1,6)+ry*sh(2,6)+rz*sh(3,6))                                                                                        
                                                                                             
                                                                                             
            he_rgnt= 2.0/he_rgnt
                                                                                             
            else
                                                                                             
            he_rgnt= he_max
                                                                                             
            end if



			
			txy = vvx - uuy
			txz = wwx - uuz
			tyz = vvz - wwy

C...TURBULENCE MODELING

		fr1=1.0
		sgrad=dsqrt(txy*txy+txz*txz+tyz*tyz)
		chi  = unut0/dif
		fv1  = chi**3.0/(chi**3.0+cv1**3.0)
		fv2  = 1.0-chi/(1.0+chi*fv1)
		sbar = sgrad + unut0/r_kappa/r_kappa/distance/distance
     &                                                         *fv2
		udif = dabs(umag-umag_trip)
		gt   = dmin1(0.1d0,udif/vort_trip/he_trip)
		fac1 = distance*distance+gt*gt*dist_trip*dist_trip
		fac2 = ct2* vort_trip*vort_trip/udif/udif*fac1
		t1   = dexp(-fac2)
		if(t1.lt.1.0e-20)then
			ft1=0.0
		else
			ft1=ct1*gt*t1
		end if
			
		ft2  = ct3*dexp(-ct4*chi*chi)
			
c                        ft1=0.0      !FOR FULLY DEVELOPED TURBULENCE
c                        ft2=0.0      !FOR FULLY DEVELOPED TURBULENCE                                                                                                    
		r= unut0/sbar/r_kappa/r_kappa/distance/distance
		if(r.ge.1.0e+30)r=10.0
		g  = r+cw2*(r**6.0-r)
		fw = g*((1+cw3**6.0)/(g**6.0+cw3**6.0))**(1.0/6.0)
		 
		tmp1 = -cw1*fw
		tmp2 = cb1/r_kappa/r_kappa*ft2
		tmp3 = cb1/r_kappa/r_kappa*(1.0-ft2)*fv2 

		p_function = cb1*(fr1-ft2)*sgrad
		q_function = (tmp1+tmp2+tmp3)/distance/distance
		r_function = ft1*udif*udif                    

		dif_turb = unut0*fv1
		vis = dif + dif_turb
			



C...TRANSFORMATION JAC.

				det = abs(det)
				eff0 = wq3(ig)*det

c...CALC. STABILITY COEFF. FOR SUPG/PSPG FORMULATION
c                                tmp=0.0
c                               if(2.0/dt.gt.10.0*umag/hk)tmp = 2.0/dt
c 				rek=umag*hk/(12.*vis)

		del1=delta(1)/sqrt(tmp*tmp+ (2.*umag/he_ugn)**2.0
     $                                  +(12.*vis/he_rgn/he_rgn)**2.0)		                                                                                    



C...CALC STABILITY COEFF FOR CONTINUITY EQN
c	    			del2 = delta(2)*umag*hk
c	    			if (rek.lt.1.0)del2=del2*rek
	del2=  delta(1)/dsqrt((2.0d0/umag/he_ugn)*(2.0d0/umag/he_ugn)
     &         + (12.0d0*vis/he_rgn/he_rgn/umag/umag)*
     &           (12.0d0*vis/he_rgn/he_rgn/umag/umag))

	tau_supg=1.0/dsqrt((2.0d0*umagn/he_ugn)**2.0
     &                 + (12.0d0*dif/he_rgnt/he_rgnt)**2.0)



C...WEIGHTS
				effr = rho*eff0
				effd = vis*eff0
				eff1 = del1*eff0
				effs = del1*effr
				effc = del2*effr




C...ELEMENT LEVEL RESIDUAL VECTOR OPTIMIZATIONS
                   
                 if (stokes) then
	         ugnutb = dnutt 
                 else
		 ugnutb = dnutt + uu0*dnutx + vv0*dnuty + ww0*dnutz
                 endif



			do na=1,nen
				sh0 = sh(0,na)
				shx = sh(1,na)
				shy = sh(2,na)
				shz = sh(3,na)

			ub=(uu0*shx+vv0*shy+ww0*shz)







		pt(1,na )= pt(1,na )
     &           + (sh0 +ub *tau_supg)* 
     &             (ugnutb
     &             - p_function * dnut0
     &             - 2.0*q_function * unut0 * dnut0
     &             - 2.0*cb2/sigma*(unutx*dnutx+unuty*dnuty
     &                              +unutz*dnutz))   *eff0
     &             +(unut0+dif)/sigma *(shx*dnutx+shy*dnuty
     &                               +shz*dnutz)     *eff0
     &             + dnut0/sigma *(shx *unutx +shy *unuty 
     &                               +shz *unutz)       *eff0    
	
		

180		format(4e18.10)
			enddo !na loop

		enddo ! quadrature loop
	



C...ASSEMBLE INTO GLOBAL VECTOR (STEP 1)
		do inl = 1,nen
			inode = ien(inl,ie)
			do idf = 1,ndf_t
				pl_t(idf,inode) = pl_t(idf,inode) + pt(idf,inl)
			enddo
		enddo

	enddo ! element loop 

c	close(80)
	close(81)
	close(82)
	close(83)
	close(84)
	return
	end


